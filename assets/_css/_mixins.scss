// stylelint-disable property-disallowed-list
// Single side border-radius

// Helper function to replace negative values with 0
@function valid-radius($radius) {
    $return: ();
    @each $value in $radius {
      @if type-of($value) == number {
        $return: append($return, max($value, 0));
      } @else {
        $return: append($return, $value);
      }
    }
    @return $return;
  }
  
  // scss-docs-start border-radius-mixins
  @mixin border-radius($radius: $border-radius, $fallback-border-radius: false) {
    @if $enable-rounded {
      border-radius: valid-radius($radius);
    }
    @else if $fallback-border-radius != false {
      border-radius: $fallback-border-radius;
    }
  }
  
  @mixin border-top-radius($radius: $border-radius) {
    @if $enable-rounded {
      border-top-left-radius: valid-radius($radius);
      border-top-right-radius: valid-radius($radius);
    }
  }
  
  @mixin border-end-radius($radius: $border-radius) {
    @if $enable-rounded {
      border-top-right-radius: valid-radius($radius);
      border-bottom-right-radius: valid-radius($radius);
    }
  }
  
  @mixin border-bottom-radius($radius: $border-radius) {
    @if $enable-rounded {
      border-bottom-right-radius: valid-radius($radius);
      border-bottom-left-radius: valid-radius($radius);
    }
  }
  
  @mixin border-start-radius($radius: $border-radius) {
    @if $enable-rounded {
      border-top-left-radius: valid-radius($radius);
      border-bottom-left-radius: valid-radius($radius);
    }
  }
  
  @mixin border-top-start-radius($radius: $border-radius) {
    @if $enable-rounded {
      border-top-left-radius: valid-radius($radius);
    }
  }
  
  @mixin border-top-end-radius($radius: $border-radius) {
    @if $enable-rounded {
      border-top-right-radius: valid-radius($radius);
    }
  }
  
  @mixin border-bottom-end-radius($radius: $border-radius) {
    @if $enable-rounded {
      border-bottom-right-radius: valid-radius($radius);
    }
  }
  
  @mixin border-bottom-start-radius($radius: $border-radius) {
    @if $enable-rounded {
      border-bottom-left-radius: valid-radius($radius);
    }
  }
  // scss-docs-end border-radius-mixins
// stylelint-disable property-disallowed-list
@mixin transition($transition...) {
    @if length($transition) == 0 {
      $transition: $transition-base;
    }
  
    @if length($transition) > 1 {
      @each $value in $transition {
        @if $value == null or $value == none {
          @warn "The keyword 'none' or 'null' must be used as a single argument.";
        }
      }
    }
  
    @if $enable-transitions {
      @if nth($transition, 1) != null {
        transition: $transition;
      }
  
      @if $enable-reduced-motion and nth($transition, 1) != null and nth($transition, 1) != none {
        @media (prefers-reduced-motion: reduce) {
          transition: none;
        }
      }
    }
  }

%reset-button {
  border: none;
  margin: 0;
  padding: 0;
  width: auto;
  overflow: visible;

  background: transparent;

  /* inherit font & color from ancestor */
  color: inherit;
  font: inherit;

  /* Normalize `line-height`. Cannot be changed from `normal` in Firefox 4+. */
  line-height: normal;

  /* Corrects font smoothing for webkit */
  -webkit-font-smoothing: inherit;
  -moz-osx-font-smoothing: inherit;

  /* Corrects inability to style clickable `input` types in iOS */
  -webkit-appearance: none;
}